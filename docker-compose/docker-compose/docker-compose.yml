---
version: '3.7'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch${ELASTIC_VERSION}
    environment: 
      - xpack.security.enabled=true
      - discovery.type=single-node
      - network.host=${ELASTICSEARCH_NETWORK_HOST}
      - cluster.routing.allocation.disk.threshold_enabled=false
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - 'logsight_elasticsearch:/usr/share/elasticsearch/data'
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    networks:
      - logsight

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana${ELASTIC_VERSION}
    environment:
      - network.host=${ELASTICSEARCH_NETWORK_HOST}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    depends_on:
      - elasticsearch
    networks:
      - logsight

  postgres:
    image: postgres:11
    volumes:
      - logsight_database:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - logsight

  logsight-backend:
    image: logsight/logsight-backend:${DOCKER_IMAGE_TAG}
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOSTNAME}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - LOGSIGHT_URL=${LOGSIGHT_URL}
      - ACCEPT_LOGSIGHT_LICENSE=${ACCEPT_LOGSIGHT_LICENSE}
    ports:
      - '${LOGSIGHT_BACKEND_PORT}:${LOGSIGHT_BACKEND_PORT}'
    networks:
      - logsight

  logsight:
    image: logsight/logsight:${DOCKER_IMAGE_TAG}
    depends_on:
      - logsight-backend
    env_file:
      - .env
    environment:
      - APP_RPC_ZMQ_ENDPOINT=tcp://*:${APP_RPC_ZMQ_PORT}
      - LOGS_STREAM_ZMQ_ENDPOINT=tcp://${LOGSIGHT_BACKEND_HOSTNAME}:${LOGS_STREAM_ZMQ_PORT}
      - LOGS_CTRL_RPC_IN_ZMQ_ENDPOINT=tcp://${LOGSIGHT_BACKEND_HOSTNAME}:${LOGS_CTRL_RPC_IN_ZMQ_PORT}
      - LOGS_CTRL_RPC_OUT_ZMQ_ENDPOINT=tcp://${LOGSIGHT_BACKEND_HOSTNAME}:${LOGS_CTRL_RPC_OUT_ZMQ_PORT}
      - ACCEPT_LOGSIGHT_LICENSE=${ACCEPT_LOGSIGHT_LICENSE}
    networks:
      - logsight

  logsight-result-api:
    image: logsight/logsight-result-api:${DOCKER_IMAGE_TAG}
    depends_on:
      - logsight
    env_file:
      - .env
    environment:
      - ACCEPT_LOGSIGHT_LICENSE=${ACCEPT_LOGSIGHT_LICENSE}
    ports:
      - "${RESULT_API_PORT}:${RESULT_API_PORT}"
    networks:
      - logsight

  logsight-frontend:
    image: logsight/logsight-frontend:${DOCKER_IMAGE_TAG}
    depends_on:
      - logsight-backend
    env_file:
      - .env
    environment:
      - ACCEPT_LOGSIGHT_LICENSE=${ACCEPT_LOGSIGHT_LICENSE}
    ports:
      - '${LOGSIGHT_FRONTEND_PORT}:${LOGSIGHT_FRONTEND_PORT}'
    networks:
      - logsight

networks:
  logsight:
    driver: bridge

volumes:
  logsight_elasticsearch:
    driver: local
  logsight_database:
    driver: local
